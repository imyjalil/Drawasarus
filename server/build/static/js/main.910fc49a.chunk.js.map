{"version":3,"sources":["utilities/constants.js","Redux/actions/socketActions.js","Redux/reducers/userReducer.js","utilities/eventHandler.js","config.js","Redux/actions/userActions.js","Redux/actions/gameActions.js","Redux/middleware/middleware.js","Redux/reducers/gameReducers.js","Redux/store.js","components/Player.js","components/LeaderBoard.js","components/canvas.js","components/Chat/Chat.js","components/modal.js","Pages/GamePage/GamePage.js","Pages/LandingPage/LandingPage.js","Playground.js","index.js"],"names":["module","exports","JOIN_GAME","CREATE_GAME","DRAW","GUESS","WORD_SELECT","CONNECT","SOCKET","GAME_ID","CLIENT_ID","NAME","WS_CONNECT","WS_DISCONNECT","WS_SEND_MESSAGE","UPDATE_PLAYER_LIST","REMOVE_PLAYER","MUTE","UNMUTE","SET_LOCAL_STREAM","SET_REMOTE_STREAM","SET_REMOTE_CORDS","START_GAME","UPDATE_POINTS","DRAW_LINES","RESET","constants","require","wsConnect","host","type","wsDisconnect","wsSendMessage","payload","initalState","gameId","name","clientId","chatEvent","isCreator","localStream","config","URL","WS_URL","storeClientId","storeGameId","storeName","resetScores","val","removePlayer","id","remoteCords","data","cords","setChoice","words","turnTime","gameTime","setSelector","time","setWordHint","hint","events","connections","remoteStreams","mediaConstraints","audio","video","iceServers","urls","addLocalTracks","rtcPeerConnection","getTracks","forEach","track","addTrack","eventHandler","event","dispatch","state","a","JSON","parse","method","TURN","WAIT","PREV_CLIENTS","END_GAME","WEBRTC_OFFER","WEBRTC_ANSWER","SEND_ICE_CANDIDATE","joinPayload","user","navigator","mediaDevices","getUserMedia","stream","sessionStorage","setItem","stringify","lines","points","image","canvasEvent","prevClients","clients","undefined","Promise","r","setTimeout","player","RTCPeerConnection","ontrack","audioElement","document","createElement","autoplay","srcObject","streams","setAttribute","getElementById","appendChild","onicecandidate","candidate","iceCandidatePayload","label","sdpMLineIndex","createOffer","sessionDescription","setLocalDescription","console","log","webRTCOfferPayload","sdp","updatePlayers","playerlist","senderId","setRemoteDescription","RTCSessionDescription","createAnswer","webRTCAnswerPayload","RTCIceCandidate","addIceCandidate","socketMiddleware","socket","store","next","action","close","WebSocket","onmessage","getState","onMessage","onclose","onopen","send","intialState","players","receivedDrawEvent","choice","selector","resetGame","rootReducer","combineReducers","ws","game","map","filter","modifiedPlayers","remoteStream","middleware","reduxThunk","createStore","compose","applyMiddleware","Player","props","useState","mute","setmute","useSelector","inverse","childNodes","getAudioTracks","enabled","child","getAttribute","className","style","color","onClick","LeaderBoard","x1","y1","x2","y2","useDispatch","listItems","value","copyCode","Canvas","canDraw","isDrawing","setIsDrawing","canvasRef","useRef","contextRef","parseInt","useEffect","canvas","current","width","getComputedStyle","querySelector","getPropertyValue","height","window","innerHeight","context","getContext","lineCap","strokeStyle","lineWidth","oldx","oldy","newx","newy","getItem","cord","drawLine","removeItem","timeLeft","gameTimer","setInterval","clearInterval","newText","metrics","measureText","clearRect","fillText","beginPath","moveTo","lineTo","stroke","closePath","clearCanvas","getMousePosition","e","x","offsetX","clientWidth","y","offsetY","clientHeight","onMouseDown","nativeEvent","onMouseUp","interval","onMouseMove","ref","disabled","Chat","mic","flipMic","addChatMessage","sendMessage","message","getElementsByClassName","trim","messageDiv","createMessage","innerHTML","containerElement","scrollTop","scrollHeight","isMine","str","liClassName","nameElement","guessWord","handleMicFlip","micElement","placeholder","onKeyPress","key","target","Modal","handleClose","show","children","showHideClassName","GamePage","history","useHistory","childrenContent","setChildrenContent","flipDrawState","showModal","setModal","setWordTime","setDrawTime","handleStartGameClose","selectionTimerSelected","turnTimerSelected","wordTime","options","selectedIndex","drawTime","startGamePayload","copyGameCode","gameCode","location","pathname","split","clipboard","writeText","word","choicePayload","handleChoiceSelection","timer","clearTimeout","push","sort","b","entry","restart","LandingPage","React","join","setJoin","joinButtonHandler","isClientCreated","isGameCreated","headers","axios","get","resp","alert","defaultValue","readOnly","post","then","response","catch","error","path","Playground","exact","ReactDOM","render"],"mappings":"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","file":"static/js/main.910fc49a.chunk.js","sourcesContent":["\r\nmodule.exports = {\r\n    JOIN_GAME: 'join',\r\n    CREATE_GAME: 'create',\r\n    DRAW: 'draw',\r\n    GUESS: 'guess',\r\n    WORD_SELECT: 'wordselect',\r\n    CONNECT: 'connect',\r\n    SOCKET: 'socket',\r\n    GAME_ID: 'gameId',\r\n    CLIENT_ID: 'clientId',\r\n    NAME: 'name',\r\n    WS_CONNECT: 'ws_connect',\r\n    WS_DISCONNECT: 'ws_disconnect',\r\n    WS_SEND_MESSAGE: 'ws_message',\r\n    UPDATE_PLAYER_LIST: 'update_player_list',\r\n    REMOVE_PLAYER: 'remove_player',\r\n    MUTE: 'mute',\r\n    UNMUTE: 'unmute',\r\n    SET_LOCAL_STREAM: 'localstream',\r\n    SET_REMOTE_STREAM: 'remotestream',\r\n    SET_REMOTE_CORDS: 'cords',\r\n    START_GAME: 'start_game',\r\n    UPDATE_POINTS: 'update_points',\r\n    DRAW_LINES: 'draw_lines',\r\n    RESET:'reset',\r\n    WORD_SELECT:'wordselect',\r\n    PREV_CLIENTS:'prevClients',\r\n    SEND_ICE_CANDIDATE:'sendIceCandidate',\r\n    WEBRTC_OFFER:'webRTCOffer',\r\n    END_GAME:'end_game',\r\n    WEBRTC_ANSWER:'webRTCAnswer',\r\n    TURN:'TURN',\r\n    WAIT:'WAIT'\r\n}","const constants = require(\"../../utilities/constants\")\r\n\r\nexport const wsConnect = (host) => {\r\n    return {\r\n        type: constants.WS_CONNECT,\r\n        host: host\r\n    }\r\n}\r\n\r\nexport const wsDisconnect = (host) => {\r\n    return {\r\n        type: constants.WS_DISCONNECT,\r\n        host: host\r\n    }\r\n}\r\n\r\nexport const wsSendMessage = (payload) => {\r\n    return {\r\n        type: constants.WS_SEND_MESSAGE,\r\n        payload: payload\r\n    }\r\n}\r\n","const constants = require(\"../../utilities/constants\")\r\n\r\nconst initalState = {\r\n    gameId: null,\r\n    name: '',\r\n    clientId: '',\r\n    chatEvent: null,\r\n    isCreator: false\r\n}\r\n\r\nexport default function userReducer(state = initalState, action) {\r\n\r\n    switch (action.type) {\r\n\r\n\r\n        case constants.SOCKET:\r\n            return {\r\n                ...state,\r\n                ws: action.payload['ws']\r\n            }\r\n\r\n        case constants.GAME_ID:\r\n            return {\r\n                ...state,\r\n                gameId: action.payload['gameId']\r\n            }\r\n\r\n        case 'clientId':\r\n            return {\r\n                ...state,\r\n                clientId: action.payload['clientId']\r\n            }\r\n\r\n        case constants.NAME:\r\n            return {\r\n                ...state,\r\n                name: action.payload['name']\r\n            }\r\n\r\n        case constants.GUESS:\r\n            return {\r\n                ...state,\r\n                chatEvent: action.payload['chatEvent']\r\n            }\r\n\r\n        case 'set_create':\r\n            return {\r\n                ...state,\r\n                isCreator: true\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { storeClientId, storeGameId } from '../Redux/actions/userActions';\r\nimport { resetScores,remoteCords,removePlayer, signalChatEvent, updatePoints, updatePlayerList, draw, setChoice, setSelector, setWordHint, endGame, setLocalStream } from '../Redux/actions/gameActions';\r\nimport { wsSendMessage } from '../Redux/actions/socketActions';\r\nconst events = require(\"./constants\")\r\n\r\nlet localStream;\r\nlet connections = {};\r\nlet remoteStreams = {};\r\n\r\nconst mediaConstraints = {\r\n    audio: true,\r\n    video: false\r\n}\r\n\r\nconst iceServers = {\r\n    iceServers: [\r\n        { urls: 'stun:stun.l.google.com:19302' },\r\n        { urls: 'stun:stun1.l.google.com:19302' },\r\n        { urls: 'stun:stun2.l.google.com:19302' },\r\n        { urls: 'stun:stun3.l.google.com:19302' },\r\n        { urls: 'stun:stun4.l.google.com:19302' },\r\n    ],\r\n}\r\n\r\nfunction addLocalTracks(rtcPeerConnection) {\r\n    localStream.getTracks().forEach((track) => {\r\n        rtcPeerConnection.addTrack(track, localStream)\r\n    })\r\n}\r\n\r\nconst eventHandler = async (event, dispatch, state) => {\r\n\r\n    if (event && event.data) {\r\n        let data = JSON.parse(event.data)\r\n\r\n        if (data && data.method) {\r\n\r\n            switch (data.method) {\r\n\r\n                case events.CONNECT:\r\n                    let clientId = data.clientId;\r\n                    dispatch(storeClientId(clientId))\r\n\r\n                    let joinPayload = {\r\n                        'method': events.JOIN_GAME,\r\n                        'clientId': clientId,\r\n                        'gameId': state.user.gameId,\r\n                        'name': state.user.name\r\n                    }\r\n\r\n                    dispatch(wsSendMessage(joinPayload))\r\n\r\n                    localStream = await navigator.mediaDevices.getUserMedia(mediaConstraints)\r\n                    dispatch(setLocalStream(localStream))\r\n                    \r\n                    \r\n\r\n                    break;\r\n\r\n                case events.CREATE_GAME:\r\n                    let gameId = data.gameId\r\n                    dispatch(storeGameId(gameId))\r\n                    sessionStorage.setItem('gameId', gameId);\r\n                    break;\r\n\r\n                case events.JOIN_GAME:\r\n                    let otherUser = data.name\r\n                    break;\r\n                \r\n                case events.DRAW_LINES:\r\n                    \r\n                    sessionStorage.setItem(\"currentState\", JSON.stringify(data.lines))\r\n                    break;\r\n\r\n                case events.TURN:\r\n                    dispatch(setChoice(data))\r\n                    break\r\n\r\n                case events.WAIT:\r\n                    dispatch(setSelector(data))\r\n                    break\r\n\r\n                case events.WORD_SELECT:\r\n                    dispatch(setWordHint(data))\r\n                    break\r\n\r\n                case events.GUESS:\r\n\r\n                    // if the data has points the update the player list\r\n                    if (data.points != 0) {\r\n                        dispatch(updatePoints(data.points, data.clientId))\r\n                    }\r\n                    dispatch(signalChatEvent(data))\r\n                    break;\r\n                case events.RESET:\r\n                    dispatch(resetScores(true))\r\n                    break;\r\n                case events.DRAW:\r\n                    dispatch(draw(data))\r\n                    break;\r\n\r\n                case events.SET_REMOTE_CORDS:\r\n                    dispatch(remoteCords(data))\r\n                    break;\r\n\r\n                case events.PREV_CLIENTS:\r\n                    let prevClients = data.clients\r\n                    while (localStream == null || localStream == undefined) {\r\n                        await new Promise(r => setTimeout(r, 100));\r\n                    }\r\n                    for (let player of prevClients) {\r\n                        let rtcPeerConnection = new RTCPeerConnection(iceServers)\r\n                        connections[player] = rtcPeerConnection\r\n                        addLocalTracks(rtcPeerConnection)\r\n\r\n                        rtcPeerConnection.ontrack = (event) => {\r\n                            //create an audio element and attach stream to it\r\n                            let audioElement = document.createElement(\"video\")\r\n                            audioElement.autoplay = \"autoplay\"\r\n                            audioElement.srcObject = event.streams[0]\r\n                            audioElement.setAttribute(\"id\", player)\r\n                            document.getElementById('audioEvents').appendChild(audioElement)\r\n                            remoteStreams[player] = event.streams[0]\r\n                        }\r\n                        rtcPeerConnection.onicecandidate = (event) => {\r\n                            if (event.candidate) {\r\n                                let iceCandidatePayload = {\r\n                                    'method': events.SEND_ICE_CANDIDATE,\r\n                                    'senderId': state.user.clientId,\r\n                                    'receiverId': player,\r\n                                    label: event.candidate.sdpMLineIndex,\r\n                                    candidate: event.candidate.candidate\r\n                                }\r\n                                dispatch(wsSendMessage(iceCandidatePayload))\r\n                            }\r\n                        }\r\n                        \r\n                        let offercreation = await async function () {\r\n                            let sessionDescription\r\n                            try {\r\n                                sessionDescription = await rtcPeerConnection.createOffer()\r\n                                rtcPeerConnection.setLocalDescription(sessionDescription)\r\n                            } catch (error) {\r\n                                console.log('error in setting session desc')\r\n                            }\r\n\r\n                            let webRTCOfferPayload = {\r\n                                'method': events.WEBRTC_OFFER,\r\n                                sdp: sessionDescription,\r\n                                'senderId': state.user.clientId,\r\n                                'receiverId': player\r\n                            }\r\n                            dispatch(wsSendMessage(webRTCOfferPayload))\r\n                        }()\r\n                    }\r\n                    break\r\n\r\n                case events.UPDATE_PLAYER_LIST:\r\n                    dispatch(updatePlayerList(data))\r\n                    break\r\n\r\n                case events.REMOVE_PLAYER:\r\n                    dispatch(removePlayer(data.id))\r\n                    break;\r\n\r\n                case events.END_GAME:\r\n                    dispatch(endGame(data.playerlist))\r\n                    break;\r\n\r\n                case events.WEBRTC_OFFER:\r\n                    let rtcPeerConnection = new RTCPeerConnection(iceServers)\r\n                    connections[data.senderId] = rtcPeerConnection\r\n                    addLocalTracks(rtcPeerConnection)\r\n\r\n                    rtcPeerConnection.ontrack = (event) => {\r\n                        //create an audio element and attach stream to it\r\n                        let audioElement = document.createElement(\"video\")\r\n                        audioElement.autoplay = \"autoplay\"\r\n                        audioElement.srcObject = event.streams[0]\r\n                        audioElement.setAttribute(\"id\", data.senderId)\r\n                        document.getElementById('audioEvents').appendChild(audioElement)\r\n                        remoteStreams[data.senderId] = event.streams[0]\r\n                    }\r\n\r\n                    rtcPeerConnection.onicecandidate = (event) => {\r\n                        if (event.candidate) {\r\n                            let iceCandidatePayload = {\r\n                                'method': events.SEND_ICE_CANDIDATE,\r\n                                'senderId': state.user.clientId,\r\n                                'receiverId': data.senderId,\r\n                                label: event.candidate.sdpMLineIndex,\r\n                                candidate: event.candidate.candidate\r\n                            }\r\n                            dispatch(wsSendMessage(iceCandidatePayload))\r\n                        }\r\n                    }\r\n\r\n\r\n                    rtcPeerConnection.setRemoteDescription(new RTCSessionDescription(data.sdp))\r\n\r\n                    let answerCreation = await async function () {\r\n                        let sessionDescription\r\n                        try {\r\n                            sessionDescription = await rtcPeerConnection.createAnswer()\r\n                            rtcPeerConnection.setLocalDescription(sessionDescription)\r\n                            \r\n                        } catch (error) {\r\n                            console.log('error in setting session desc')\r\n                        }\r\n\r\n                        let webRTCAnswerPayload = {\r\n                            'method': events.WEBRTC_ANSWER,\r\n                            sdp: sessionDescription,\r\n                            'senderId': state.user.clientId,\r\n                            'receiverId': data.senderId\r\n                        }\r\n                        dispatch(wsSendMessage(webRTCAnswerPayload))\r\n                    }()\r\n                    break\r\n\r\n                case events.WEBRTC_ANSWER:\r\n                    connections[data.senderId].setRemoteDescription(data.sdp)\r\n                    break\r\n\r\n                case events.SEND_ICE_CANDIDATE:\r\n                    let candidate = new RTCIceCandidate({\r\n                        sdpMLineIndex: data.label,\r\n                        candidate: data.candidate\r\n                    })\r\n                    connections[data.senderId].addIceCandidate(candidate)\r\n                    break\r\n\r\n                default:\r\n                    console.log('other event:' + data.method)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default eventHandler;","const dev = {\r\n    URL: \"http://localhost:9091/\",\r\n    WS_URL: \"ws://localhost:9091/\"\r\n}\r\n\r\nconst prod = {\r\n    URL: \"https://drawasarus.herokuapp.com/\",\r\n    WS_URL: \"wss://drawasarus.herokuapp.com/\"\r\n}\r\n\r\nconst config = prod\r\n\r\nexport default {\r\n    ...config\r\n}","import axios from 'axios'\r\nimport config from '../../config'\r\nconst constants = require(\"../../utilities/constants\")\r\n\r\nexport const createGame = () => (dispatch) => {\r\n    return axios.post(config.URL + \"create-game\")\r\n        .then(response => {\r\n            response = response.data\r\n            dispatch(storeGameId(response.gameId))\r\n            return `game/${response.gameId}`\r\n        })\r\n        .catch(error => {\r\n            return ''\r\n            alert('Unable to start Game. Please try later')\r\n        })\r\n\r\n}\r\n\r\nexport const joinGame = () => {\r\n    return {\r\n        type: constants.JOIN_GAME\r\n    }\r\n}\r\nexport const connect = () => {\r\n    return {\r\n        type: constants.CONNECT\r\n    }\r\n}\r\n\r\nexport const createSocket = (ws) => {\r\n    return {\r\n        type: constants.SOCKET,\r\n        payload: {\r\n            'ws': ws\r\n        }\r\n    }\r\n}\r\n\r\nexport const storeClientId = (clientId) => {\r\n    return {\r\n        type: constants.CLIENT_ID,\r\n        payload: {\r\n            'clientId': clientId\r\n        }\r\n    }\r\n}\r\n\r\nexport const storeGameId = (gameId) => {\r\n    return {\r\n        type: constants.GAME_ID,\r\n        payload: {\r\n            'gameId': gameId\r\n        }\r\n    }\r\n}\r\n\r\nexport const storeName = (name) => {\r\n    return {\r\n        type: constants.NAME,\r\n        payload: {\r\n            'name': name\r\n        }\r\n    }\r\n}\r\n\r\nexport const setCreator = () => {\r\n    return {\r\n        type: 'set_create'\r\n    }\r\n}","const constants = require(\"../../utilities/constants\")\r\n\r\nexport const draw = (image) => {\r\n    return {\r\n        type: constants.DRAW,\r\n        payload: {\r\n            'image': image.canvasEvent\r\n        }\r\n    }\r\n}\r\n\r\nexport const signalChatEvent = (chatEvent) => {\r\n    return {\r\n        type: constants.GUESS,\r\n        payload: {\r\n            'chatEvent': chatEvent\r\n        }\r\n    }\r\n}\r\n\r\nexport const updatePlayerList = (updatePlayers) => {\r\n\r\n    return {\r\n        type: constants.UPDATE_PLAYER_LIST,\r\n        payload: updatePlayers\r\n    }\r\n}\r\n\r\nexport const updatePoints = (points, id) => {\r\n    return {\r\n        type: constants.UPDATE_POINTS,\r\n        payload: {\r\n            'points': points,\r\n            'id': id\r\n        }\r\n    }\r\n}\r\n\r\nexport const resetScores = (val) => {\r\n    return {\r\n        type : 'RESET_GAME',\r\n        payload: {\r\n            'val':val\r\n        }\r\n    }\r\n}\r\n\r\nexport const removePlayer = (id) => {\r\n    return {\r\n        type: constants.REMOVE_PLAYER,\r\n        payload: {\r\n            'id': id\r\n        }\r\n    }\r\n}\r\n\r\nexport const remoteCords = (data) => {\r\n    return {\r\n        type: constants.SET_REMOTE_CORDS,\r\n        payload: {\r\n            'cords': data.cords\r\n        }\r\n    }\r\n}\r\n\r\nexport const setLocalStream = (stream) => {\r\n    return {\r\n        type: constants.SET_LOCAL_STREAM,\r\n        payload: {\r\n            'stream': stream\r\n        }\r\n    }\r\n}\r\n\r\nexport const setRemoteStream = (stream, id) => {\r\n    return {\r\n        type: constants.SET_REMOTE_STREAM,\r\n        payload: {\r\n            'stream': stream,\r\n            'id': id\r\n        }\r\n    }\r\n}\r\n\r\nexport const setChoice = (data) => {\r\n    var words=data.words\r\n    var turnTime=data.turnTime\r\n    var gameTime=data.gameTime\r\n    return {\r\n        type: 'CHOICE',\r\n        payload: {\r\n            'words': words,\r\n            'turnTime':turnTime,\r\n            'gameTime':gameTime\r\n        }\r\n    }\r\n}\r\n\r\nexport const setSelector = (data) => {\r\n    var name=data.name\r\n    if(\"time\" in data)\r\n    {\r\n        var time=data.time\r\n        return {\r\n            type: 'SELECTOR',\r\n            payload: {\r\n                'name': name,\r\n                'time': time\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        type: 'SELECTOR',\r\n        payload: {\r\n            'name': name,\r\n            'time': time\r\n        }\r\n    }    \r\n}\r\n\r\nexport const setWordHint = (data) => {\r\n    var hint=data.hint\r\n    var time=data.time\r\n    return {\r\n        type: 'HINT',\r\n        payload: {\r\n            'hint': hint,\r\n            'time': time\r\n        }\r\n    }\r\n}\r\n\r\nexport const endGame = (playerlist) => {\r\n    return {\r\n        type: 'end_game',\r\n        payload: {\r\n            'playerlist': playerlist\r\n        }\r\n    }\r\n}","import eventHandler from \"../../utilities/eventHandler\"\r\n\r\nconst { WS_CONNECT, WS_DISCONNECT, WS_SEND_MESSAGE } = require(\"../../utilities/constants\")\r\nconst { wsConnect, wsDisconnect } = require(\"../actions/socketActions\")\r\n\r\n\r\nconst socketMiddleware = () => {\r\n\r\n    let socket = null\r\n    let host = ''\r\n\r\n    const onMessage = (store) => (event) => {\r\n        eventHandler(event, store.dispatch, store.getState())\r\n\r\n    }\r\n\r\n    const onOpen = (store) => (event) => {\r\n        console.log(\"web socket connection opened\")\r\n    }\r\n\r\n    const onClose = (store) => (event) => {\r\n        console.log(\"web socket connection closed\")\r\n    }\r\n\r\n    // middleware\r\n    return store => next => action => {\r\n\r\n        switch (action.type) {\r\n\r\n            case WS_CONNECT:\r\n                if (socket != null) {\r\n                    socket.close()\r\n                    host = ''\r\n                }\r\n                socket = new WebSocket(action.host)\r\n\r\n                // register handlers\r\n                socket.onmessage = onMessage(store)\r\n                socket.onclose = onClose(store)\r\n                socket.onopen = onOpen(store)\r\n                break;\r\n\r\n            case WS_DISCONNECT:\r\n                if (socket != null) {\r\n                    socket.close()\r\n                }\r\n                socket = null\r\n                host = ''\r\n                break;\r\n            case WS_SEND_MESSAGE:\r\n                socket.send(JSON.stringify(action.payload))\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n        return next(action)\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default socketMiddleware","const constants = require(\"../../utilities/constants\")\r\n\r\nconst intialState = {\r\n    players: [],\r\n    localStream: null,\r\n    remoteCords: [0, 0, 0, 0],\r\n    receivedDrawEvent: false,\r\n    image: null,\r\n    choice: null,\r\n    selector: null,\r\n    hint: null,\r\n    gameTime:0,\r\n    turnTime:0,\r\n    playerlist: null,//will be populated on end_game event\r\n    resetGame:false\r\n}\r\n\r\nexport default function gameReducer(state = intialState, action) {\r\n\r\n    switch (action.type) {\r\n\r\n        case constants.UPDATE_PLAYER_LIST:\r\n            return {\r\n                ...state,\r\n                players: action.payload.playerlist\r\n            }\r\n\r\n        case constants.UPDATE_POINTS:\r\n            return {\r\n                ...state,\r\n                players: state.players.map(player => {\r\n\r\n                    if (player.id == action.payload.id) {\r\n                        player.points++;\r\n                    }\r\n\r\n                    return player\r\n                })\r\n            }\r\n        \r\n        case 'RESET_GAME':\r\n            return{\r\n                ...state,\r\n                players: state.players.map(player => {\r\n                    if(action.payload.val == true)\r\n                    {\r\n                        player.points = 0;\r\n                    }\r\n                    return player\r\n                }),\r\n                resetGame:action.payload.val\r\n            }\r\n\r\n        case constants.REMOVE_PLAYER:\r\n            return {\r\n                ...state,\r\n                players: state.players.filter(player => player.id != action.payload.id)\r\n            }\r\n\r\n        case constants.DRAW:\r\n            return {\r\n                ...state,\r\n                image: action.payload.image\r\n            }\r\n\r\n        case constants.SET_REMOTE_CORDS:\r\n            return {\r\n                ...state,\r\n                remoteCords: action.payload.cords,\r\n                receivedDrawEvent: !state.receivedDrawEvent\r\n            }\r\n\r\n        case constants.SET_LOCAL_STREAM:\r\n            return {\r\n                ...state,\r\n                localStream: action.payload.stream\r\n            }\r\n\r\n        case constants.SET_REMOTE_STREAM:\r\n            var modifiedPlayers = JSON.parse(JSON.stringify(state.players))\r\n            modifiedPlayers.forEach((player) => {\r\n                if (player.id == action.payload.id) {\r\n                    player.remoteStream = action.payload.stream\r\n                }\r\n            })\r\n            return {\r\n                ...state,\r\n                players: modifiedPlayers\r\n            }\r\n\r\n        case 'CHOICE':\r\n            return {\r\n                ...state,\r\n                choice: action.payload.words,\r\n                turnTime: action.payload.turnTime,\r\n                gameTime: action.payload.gameTime\r\n            }\r\n\r\n        case 'SELECTOR':\r\n            if(\"time\" in action.payload)\r\n            {\r\n                return {\r\n                    ...state,\r\n                    selector: action.payload.name,\r\n                    turnTime: action.payload.time\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                selector:action.payload.name\r\n            }\r\n\r\n        case 'HINT':\r\n            return {\r\n                ...state,\r\n                hint: JSON.parse(JSON.stringify(action.payload.hint)),\r\n                gameTime:action.payload.time\r\n            }\r\n\r\n        case 'end_game':\r\n            return {\r\n                ...state,\r\n                playerlist: action.payload.playerlist\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\"\r\nimport userReducer from \"./reducers/userReducer\"\r\nimport reduxThunk from 'redux-thunk'\r\nimport socketMiddleware from \"./middleware/middleware\"\r\nimport gameReducer from \"./reducers/gameReducers\"\r\n\r\nconst rootReducer = combineReducers({\r\n    user: userReducer,\r\n    game: gameReducer\r\n})\r\n\r\nconst middleware = [\r\n    reduxThunk,\r\n    socketMiddleware()\r\n]\r\n\r\nconst store = createStore(rootReducer,\r\n    compose(\r\n        applyMiddleware(...middleware),\r\n        // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n\r\n)\r\n\r\nexport default store","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useState } from 'react'\r\nimport \"./Player.css\"\r\n\r\nfunction Player(props) {\r\n\r\n    const [mute, setmute] = useState(false)\r\n\r\n    let state = useSelector(state => {\r\n\r\n        return {\r\n            clientId: state.user.clientId,\r\n            localStream: state.game.localStream\r\n\r\n        }\r\n    })\r\n\r\n    const inverse = () => {\r\n\r\n        // need to get access to the audioEvents in the dom\r\n        // so we can change the volume\r\n        // this is a hack\r\n        const audioEvents = document.getElementById('audioEvents')\r\n        let childNodes = audioEvents.childNodes;\r\n\r\n        if (state.clientId == props.id && state.localStream != null) {\r\n            if (mute) {\r\n                state.localStream.getAudioTracks().forEach(track => track.enabled = true)\r\n            }\r\n            else {\r\n                state.localStream.getAudioTracks().forEach(track => track.enabled = false)\r\n            }\r\n            setmute(!mute)\r\n            return;\r\n        }\r\n\r\n        // iterate over the child nodes\r\n        childNodes.forEach((child) => {\r\n\r\n            // setmute only if the child is the one we are looking for\r\n            if (child.getAttribute(\"id\") == props.id) {\r\n                const remoteStream = child.srcObject\r\n                if (remoteStream != null) {\r\n                    // console.log(\"tracks\", child.srcObject.getAudioTracks())\r\n                    if (mute) {\r\n                        child.srcObject.getAudioTracks().forEach(track => track.enabled = true)\r\n                    }\r\n                    else {\r\n                        child.srcObject.getAudioTracks().forEach(track => track.enabled = false)\r\n                    }\r\n                    setmute(!mute)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"player\" style={{ color: props.id == state.clientId ? 'black' : '#6a4c93' }}>\r\n            <div>\r\n                {props.name}\r\n            </div>\r\n            <div>\r\n                <span>{props.points}</span>\r\n            </div>\r\n            <div>\r\n                {mute ?\r\n                <span className=\"material-icons\" onClick={inverse}>volume_off</span> :\r\n                <span className=\"material-icons\" onClick={inverse}>volume_up</span>\r\n                }  \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Player\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Player from './Player'\r\nimport \"./LeaderBoard.css\"\r\n\r\nfunction LeaderBoard(props) {\r\n\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    const players = useSelector(state => state.game.players)\r\n\r\n\r\n    const listItems = players.map((player) => <Player key={player.id} id={player.id} name={player.name} points={player.points} />);\r\n\r\n\r\n    return (\r\n        <div className=\"leader-board-container\">\r\n\r\n            <div className=\"player-details-container\">\r\n                {listItems}\r\n            </div>\r\n\r\n            <div className=\"copyCode\">\r\n                <input type=\"button\" value=\"Copy GameCode\" onClick={props.copyCode} /> \r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default LeaderBoard\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { wsSendMessage } from \"../Redux/actions/socketActions\";\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nconst events = require(\"../utilities/constants\")\r\n\r\nlet x1, y1, x2, y2;\r\n\r\nconst Canvas = (props) => {\r\n\r\n    let canDraw = props.canDraw\r\n    const [isDrawing, setIsDrawing] = useState(false);\r\n    const canvasRef = useRef(null);\r\n    const contextRef = useRef(null);\r\n\r\n    const dispatch = useDispatch()\r\n    let interval;\r\n    let state = useSelector(state => {\r\n\r\n        return {\r\n            clientId: state.user.clientId,\r\n            gameId: state.user.gameId,\r\n            remoteCords: state.game.remoteCords,\r\n            image: state.game.image,\r\n            receivedDrawEvent: state.game.receivedDrawEvent,\r\n            choice: state.game.choice,\r\n            selector: state.game.selector,\r\n            hint:state.game.hint,\r\n            gameTime:parseInt(state.game.gameTime)\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        canvas.width = parseInt(getComputedStyle(document.querySelector('#canvasElement')).getPropertyValue('width'))\r\n        canvas.height = window.innerHeight;\r\n        canvas.style.width = `100%`;\r\n        canvas.style.height = `100%`;\r\n        const context = canvas.getContext(\"2d\");\r\n        //context.scale(2, 2);\r\n        context.lineCap = \"round\";\r\n        context.strokeStyle = \"black\";\r\n        context.lineWidth = 2;\r\n        contextRef.current = context;\r\n\r\n        // window.onresize = () => {\r\n\r\n        //     console.log(\"resize\")\r\n        //     const canvas = canvasRef.current;\r\n        //     canvas.style.width = '100%';\r\n        //     canvas.style.height = '100%';\r\n        //     canvas.width = canvas.offsetWidth;\r\n        //     canvas.height = canvas.offsetHeight;\r\n        // }\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        const [oldx, oldy, newx, newy] = state.remoteCords;\r\n\r\n        const lines = JSON.parse(sessionStorage.getItem(\"currentState\"))\r\n\r\n        if (lines != null) {\r\n            lines.map((cord) => {\r\n                const [oldx, oldy, newx, newy] = cord\r\n                drawLine(oldx, oldy, newx, newy)\r\n            })\r\n            sessionStorage.removeItem(\"currentState\")\r\n        }\r\n\r\n        drawLine(oldx, oldy, newx, newy)\r\n    }, [state.receivedDrawEvent])\r\n\r\n    useEffect(()=>{\r\n        if(props.canDraw){\r\n            const canvas = canvasRef.current;\r\n            const context = canvas.getContext(\"2d\");\r\n            let timeLeft=state.gameTime\r\n            \r\n            let gameTimer = setInterval(()=>{\r\n                if(timeLeft<1)\r\n                {\r\n                    clearInterval(gameTimer)\r\n                }\r\n                else{\r\n                    timeLeft=timeLeft-1\r\n                    var newText=\"\"+timeLeft\r\n                    var metrics=context.measureText(newText)\r\n                    context.clearRect(canvas.width-75-metrics.width,0,canvas.width,25)\r\n                    context.fillText(newText,canvas.width - 75, 25)                   \r\n                }\r\n            },1000)\r\n        }\r\n    },[props.canDraw])\r\n\r\n    const drawLine = (x1, y1, x2, y2) => {\r\n\r\n        contextRef.current.beginPath();\r\n        contextRef.current.moveTo(x1, y1);\r\n        contextRef.current.lineTo(x2, y2);\r\n        contextRef.current.stroke()\r\n        contextRef.current.closePath();\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (state.choice !== null) {\r\n            clearCanvas()\r\n        }\r\n    }, [state.choice])\r\n\r\n    useEffect(() => {\r\n        if (state.selector !== null) {\r\n            clearCanvas()\r\n        }\r\n    }, [state.selector])\r\n\r\n    useEffect(() => {\r\n        if (state.image != null) {\r\n            // var image = new Image();\r\n            // image.src = state.image;\r\n            // contextRef.current.drawImage(image, 0, 0)\r\n        }\r\n\r\n    }, [state.image])\r\n\r\n    useEffect(()=>{\r\n        if(state.hint!=null){\r\n            const canvas = canvasRef.current;\r\n            const context = canvas.getContext(\"2d\");\r\n            let timeLeft=state.gameTime\r\n            \r\n            let gameTimer = setInterval(()=>{\r\n                if(timeLeft<1)\r\n                {\r\n                    clearInterval(gameTimer)\r\n                }\r\n                else{\r\n                    timeLeft=timeLeft-1\r\n                    var newText=state.hint+\"   \"+timeLeft\r\n                    var metrics=context.measureText(newText)\r\n                    context.clearRect(canvas.width-75-metrics.width,0,canvas.width,25)\r\n                    context.fillText(newText,canvas.width - 75, 25)                   \r\n                }\r\n            },1000)\r\n        }\r\n    },[state.hint])\r\n\r\n    function clearCanvas() {\r\n        const canvas = canvasRef.current\r\n        contextRef.current.clearRect(0, 0, canvas.width, canvas.height);\r\n    }\r\n\r\n    //https://stackoverflow.com/questions/43955925/html5-responsive-canvas-mouse-position-and-resize\r\n    const getMousePosition = (e) => {\r\n        const canvas = canvasRef.current;\r\n        var mouseX = e.offsetX * canvas.width / canvas.clientWidth | 0;\r\n        var mouseY = e.offsetY * canvas.height / canvas.clientHeight | 0;\r\n        return { x: mouseX, y: mouseY };\r\n    }\r\n\r\n    const startDrawing = ({ nativeEvent }) => {\r\n        if (!canDraw) return\r\n        contextRef.current.beginPath();\r\n\r\n        x1 = getMousePosition(nativeEvent).x\r\n        y1 = getMousePosition(nativeEvent).y\r\n\r\n        contextRef.current.moveTo(x1, y1);\r\n        setIsDrawing(true);\r\n    };\r\n\r\n    const finishDrawing = () => {\r\n        contextRef.current.closePath();\r\n        setIsDrawing(false);\r\n        clearInterval(interval)\r\n    };\r\n\r\n    const draw = ({ nativeEvent }) => {\r\n        if (!isDrawing) {\r\n            return;\r\n        }\r\n\r\n        x2 = getMousePosition(nativeEvent).x\r\n        y2 = getMousePosition(nativeEvent).y\r\n\r\n        const payload = {\r\n            'method': events.SET_REMOTE_CORDS,\r\n            'gameId': state.gameId,\r\n            'clientId': state.clientId,\r\n            cords: [x1, y1, x2, y2]\r\n        }\r\n\r\n        dispatch(wsSendMessage(payload))\r\n\r\n        // interval = setInterval(() => {\r\n        //     dispatch(wsSendMessage(payload))\r\n        // }, 150)\r\n\r\n        contextRef.current.lineTo(x2, y2);\r\n        contextRef.current.stroke();\r\n        x1 = x2;\r\n        y1 = y2;\r\n    };\r\n\r\n    let canvasStyle = {\r\n        width: `100%`\r\n    }\r\n    return (\r\n        <canvas\r\n            onMouseDown={startDrawing}\r\n            onMouseUp={finishDrawing}\r\n            onMouseMove={draw}\r\n            ref={canvasRef}\r\n            id=\"canvasElement\"\r\n            style={canvasStyle}\r\n            disabled\r\n        />\r\n    );\r\n}\r\n\r\nexport default Canvas","import React, { Component, useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { wsSendMessage } from '../../Redux/actions/socketActions'\r\nimport './Chat.css'\r\nconst events = require(\"../../utilities/constants\")\r\n\r\nconst Chat = () => {\r\n    let [mic, flipMic] = useState(false);\r\n\r\n    let dispatch = useDispatch()\r\n    let state = useSelector(state => {\r\n        return {\r\n            clientId: state.user.clientId,\r\n            name: state.user.name,\r\n            gameId: state.user.gameId,\r\n            chatEvent: state.user.chatEvent\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        addChatMessage(state.chatEvent)\r\n    }, [state.chatEvent])\r\n\r\n    const sendMessage = (message) => {\r\n        if (message === null) {\r\n            message = document.getElementsByClassName('textContainer')[0].value\r\n        }\r\n\r\n        message = message.trim()\r\n        if (message === '') return\r\n        message = {\r\n            'method': events.GUESS,\r\n            'guessWord': message,\r\n            'clientId': state.clientId,\r\n            'name': state.name,\r\n            'gameId': state.gameId\r\n        }\r\n\r\n        dispatch(wsSendMessage(message))\r\n        document.getElementsByClassName('textContainer')[0].value = ''\r\n    }\r\n\r\n    const addChatMessage = (message) => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        var messageDiv = createMessage(message)\r\n        document.getElementById(\"chatMessages\").innerHTML += messageDiv\r\n        let containerElement = document.getElementById('outerContainer')\r\n        containerElement.scrollTop = containerElement.scrollHeight\r\n    }\r\n\r\n    const createMessage = (message) => {\r\n        var isMine = message.clientId === state.clientId\r\n        \r\n        if (message.points) {\r\n            let str = (isMine ? 'You' : message.name) + ' got it right'\r\n            return (`<li class=notif>${str}</li>`)\r\n        }\r\n        var liClassName = isMine ? \"mine\" : \"their\"\r\n        let nameElement = '';\r\n        if (!isMine) {\r\n            nameElement = `<span class='senderName'>${(message.name)}</span>`;\r\n        }\r\n\r\n        return (`<li class='message ${liClassName}'>\r\n        <div class='messageContainer'>\r\n            ${nameElement}\r\n            <span class='messageBody'>\r\n                ${message.guessWord}\r\n            </span>\r\n        </div>\r\n    </li>`)\r\n    }\r\n\r\n    const handleMicFlip = () => {\r\n        flipMic(!mic)\r\n    }\r\n\r\n    let micElement = mic ?\r\n        <span className=\"material-icons micButton\"\r\n            onClick={() => handleMicFlip()}>mic</span> :\r\n        <span className=\"material-icons micButton\"\r\n            onClick={() => handleMicFlip()}>mic_off</span>\r\n\r\n    return (\r\n        <div className=\"outerContainer\" id=\"outerContainer\">\r\n            <div className=\"chatContainer\">\r\n                <div id=\"chatMessages\" className=\"chatMessages\">\r\n                </div>\r\n            </div>\r\n            <footer>\r\n                <div className=\"footerContainer\">\r\n                    <input className=\"textContainer\"\r\n                        id=\"textInputContainer\"\r\n                        placeholder={'Type a message...'}\r\n                        onKeyPress={(event) => event.key === 'Enter' ? sendMessage(event.target.value) : null}\r\n                    />\r\n                    <i className=\"material-icons sendButton\"\r\n                        onClick={() => sendMessage(null)}>send</i>\r\n                    {micElement}\r\n                </div>\r\n            </footer>\r\n        </div>\r\n    )\r\n}\r\nexport default Chat","import React, { Component } from 'react';\r\nimport './modal.css'\r\nconst Modal = ({ handleClose, show, children }) => {\r\n    const showHideClassName = show ? 'modal display-block' : 'modal display-none';\r\n\r\n    return (\r\n        <div className={showHideClassName}>\r\n            <section className='modal-main'>\r\n                {children}\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\nexport default Modal","import React, { useEffect, useState } from 'react'\r\nimport LeaderBoard from '../../components/LeaderBoard'\r\nimport Canvas from '../../components/canvas'\r\nimport Chat from '../../components/Chat/Chat'\r\nimport Modal from '../../components/modal'\r\nimport './gamePage.css'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { wsSendMessage } from '../../Redux/actions/socketActions'\r\nimport { resetScores, setSelector, setWordHint } from '../../Redux/actions/gameActions'\r\nconst events = require(\"../../utilities/constants\")\r\n\r\nfunction GamePage() {\r\n\r\n    let history = useHistory()\r\n    let dispatch = useDispatch()\r\n\r\n    let [childrenContent, setChildrenContent] = useState(null)\r\n    let [canDraw, flipDrawState] = useState(false)\r\n    let state = useSelector(state => {\r\n\r\n        return {\r\n            gameId: state.user.gameId,\r\n            clientId: state.user.clientId,\r\n            isCreator: state.user.isCreator,\r\n            name : state.user.name,\r\n            choice: state.game.choice,\r\n            selector: state.game.selector,\r\n            resetGame: state.game.resetGame,\r\n            turnTime: parseInt(state.game.turnTime),\r\n            hint: state.game.hint,\r\n            playerlist: state.game.playerlist\r\n        }\r\n    })\r\n\r\n    const [showModal, setModal] = useState(state.isCreator)\r\n    const [wordTimer, setWordTime] = useState(0)\r\n    const [drawTimer, setDrawTime] = useState(0)\r\n    // \r\n\r\n    useEffect(() => {\r\n        if (state.choice !== null) {\r\n            setModal(true)\r\n            dispatch(setSelector({'name':state.name}))\r\n            let time = state.turnTime\r\n            setChildrenContent(<div>\r\n                <div className=\"headerContainer\">\r\n                    <span id=\"wordSelectionText\">Choose a Word</span>\r\n                    <span id=\"time\">{time}</span>\r\n                </div>\r\n                <div className=\"buttonContainer\">\r\n                    {state.choice.map((word) => {\r\n                        return <button key={word} className=\"selectionButton\" onClick={() => { handleChoiceSelection(word) }}>{word}</button>\r\n                    })}\r\n                </div>\r\n            </div>)\r\n            let timer = setInterval(function(){\r\n                if(time<=1){\r\n                    clearTimeout(timer)\r\n                }\r\n                else{\r\n                    time--;\r\n                    document.getElementById(\"time\").innerHTML=time\r\n                }\r\n            },1000)\r\n        }\r\n    }, [state.choice])\r\n\r\n    // wait trigger\r\n    useEffect(() => {\r\n\r\n        if (state.selector !== null && state.selector != state.name) {\r\n            flipDrawState(false)\r\n            setModal(true)\r\n            let time=state.turnTime\r\n            setChildrenContent(<div className=\"headerContainer\">\r\n                <span id=\"wordSelectionText\">Please wait {state.selector} is choosing a word</span>\r\n                <span id=\"time\"></span>\r\n            </div>)\r\n            let timer = setInterval(function(){\r\n                if(time<=1){\r\n                    clearTimeout(timer)\r\n                }\r\n                else{\r\n                    time--;\r\n                    document.getElementById(\"time\").innerHTML=time\r\n                }\r\n            },1000)\r\n        }\r\n    }, [state.selector])\r\n\r\n    useEffect(() => {\r\n        if (state.gameId === null) {\r\n            moveToHomePage()\r\n        }\r\n    }, [state.gameId])\r\n\r\n    useEffect(() => {\r\n\r\n        if(state.resetGame == true)\r\n        {\r\n            dispatch(resetScores(false));\r\n            setModal(false);\r\n        }\r\n    }, [state.resetGame])\r\n\r\n\r\n    useEffect(() => {\r\n        setChildrenContent(<div>\r\n            <div>\r\n                Set Timeout for Drawing:\r\n                <select id=\"turnTimer\">\r\n                    <option value=\"40\">40</option>\r\n                    <option value=\"45\">45</option>\r\n                    <option value=\"50\">50</option>\r\n                    <option value=\"55\">55</option>\r\n                    <option value=\"60\">60</option>\r\n                    <option value=\"65\">65</option>\r\n                    <option value=\"70\">70</option>\r\n                    <option value=\"75\">75</option>\r\n                    <option value=\"80\">80</option>\r\n                    <option value=\"85\">85</option>\r\n                </select>\r\n            </div>\r\n            <div>\r\n                Set Timeout for Word Selection:\r\n                <select id=\"selectionTimer\">\r\n                    <option value=\"15\">15</option>\r\n                    <option value=\"20\">20</option>\r\n                    <option value=\"25\">25</option>\r\n                    <option value=\"30\">30</option>\r\n                    <option value=\"35\">35</option>\r\n                    <option value=\"40\">40</option>\r\n                </select>\r\n            </div>\r\n            Click here to copy the game code\r\n            <span className=\"material-icons copyButton\" onClick={copyGameCode}>content_copy</span>\r\n            <button onClick={handleStartGameClose}>Start Game!</button></div>)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (state.hint !== null) {\r\n            setModal(false)\r\n        }\r\n    }, [state.hint])\r\n\r\n    const restart = () => {\r\n        setModal(false);\r\n        var payload = {\r\n            'method':events.START_GAME,\r\n            'gameId':state.gameId\r\n        }\r\n        dispatch(wsSendMessage(payload))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (state.playerlist !== null) {\r\n            let playerlist = state.playerlist\r\n            playerlist.sort((a, b) => (a.points > b.points) ? -1 : 1)\r\n            setModal(true)\r\n            setChildrenContent(<div>\r\n                <p>Leader Board</p>\r\n                {state.playerlist.map((entry) => {\r\n                    return (<div key={entry.id}>\r\n                        <p>{entry.name}</p>\r\n                        <p>{entry.points}</p>\r\n                    </div>)\r\n                })}\r\n                <p>Game Ended!!!</p>\r\n                {state.isCreator && <button onClick = {() => {restart()}}>Play again</button>}\r\n            </div>)\r\n\r\n        }\r\n    }, [state.playerlist])\r\n\r\n    function moveToHomePage() {\r\n        history.push('/')\r\n    }\r\n\r\n    function handleChoiceSelection(word) {\r\n        let choicePayload = {\r\n            'method': 'choice',\r\n            'word': word,\r\n            'clientId': state.clientId,\r\n            'gameId': state.gameId\r\n        }\r\n        setModal(false)\r\n        dispatch(wsSendMessage(choicePayload))\r\n        flipDrawState(true)\r\n    }\r\n\r\n    function handleStartGameClose() {\r\n        var selectionTimerSelected=document.getElementById('selectionTimer')\r\n        var turnTimerSelected=document.getElementById('turnTimer')\r\n        let wordTime = selectionTimerSelected.options[selectionTimerSelected.selectedIndex].value\r\n        let drawTime = turnTimerSelected.options[turnTimerSelected.selectedIndex].value\r\n        let startGamePayload = {\r\n            'method': events.START_GAME,\r\n            'gameTimer':drawTime,\r\n            'turnTimer':wordTime,\r\n            gameId: state.gameId\r\n        }\r\n        setWordTime(wordTime)\r\n        setDrawTime(drawTime)\r\n        setModal(false)\r\n        dispatch(wsSendMessage(startGamePayload))\r\n\r\n\r\n    }\r\n\r\n    function copyGameCode() {\r\n        const gameCode = window.location.pathname.split(\"/\")[2]\r\n        navigator.clipboard.writeText(gameCode)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"gamePageContainer\">\r\n\r\n\r\n            <div className=\"leaderBoard\">\r\n                <LeaderBoard  copyCode = {copyGameCode} />\r\n            </div>\r\n            <div className =\"canvas\">\r\n                <Canvas canDraw={canDraw} />\r\n            </div>\r\n            <div className = \"chatBox\">\r\n                <Chat />\r\n            </div>\r\n\r\n            <div id=\"audioEvents\">\r\n            </div>\r\n\r\n            <Modal id=\"modal\" show={showModal} children={childrenContent} />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GamePage\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { wsConnect } from '../../Redux/actions/socketActions';\r\nimport { createGame, storeName, storeGameId, setCreator } from '../../Redux/actions/userActions';\r\nimport axios from 'axios';\r\nimport './LandingPage.css'\r\nimport config from '../../config'\r\n\r\nfunction LandingPage() {\r\n\r\n    const [join, setJoin] = React.useState(false)\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    let state = useSelector(state => {\r\n\r\n        return {\r\n            clientId: state.user.clientId,\r\n            gameId: state.user.gameId,\r\n            name: state.user.name,\r\n            isClientCreated: state.user.isClientCreated,\r\n            isGameCreated: state.user.isGameCreated\r\n        }\r\n    })\r\n\r\n\r\n    const createButtonHandler = () => {\r\n        // first send a get request to create game\r\n        // store the gameid and client id redux thunk\r\n        dispatch(setCreator())\r\n        dispatch(storeName(document.getElementById('name').value))\r\n        dispatch(createGame())\r\n            .then(path => {\r\n                if (path != '') {\r\n                    dispatch(wsConnect(config.WS_URL))\r\n                    history.push(path)\r\n                }\r\n            })\r\n    }\r\n\r\n    const joinButtonHandler = async () => {\r\n        dispatch(storeName(document.getElementById('name').value))\r\n        let gameId = document.getElementById('gameId').value\r\n        let headers = {\r\n            \"gameId\": gameId\r\n        }\r\n        let resp = await axios.get(config.URL + \"isValidGame\", { headers })\r\n        \r\n        if (!resp || !resp.data || !resp.data['valid']) {\r\n            alert(\"Game id is Invalid. Please check again\")\r\n            return\r\n        }\r\n\r\n        dispatch(storeGameId(gameId))\r\n        dispatch(wsConnect(config.WS_URL))\r\n        history.push('game/' + gameId)\r\n    }\r\n\r\n    return (\r\n        <div className=\"LandingPage\" >\r\n            <div className=\"well\">\r\n                <div className=\"row selectors \">\r\n                    <input type=\"text\" className=\"create\" defaultValue=\"Create\" readOnly onClick={() => { setJoin(false) }}></input>\r\n                    <input type=\"text\" className=\"join\" defaultValue=\"Join\" readOnly onClick={() => { setJoin(true) }}></input>\r\n                </div>\r\n\r\n                {join ?\r\n                    <div className=\"row joinCell\">\r\n                        <div className=\"input-container\">\r\n\r\n                            <input type=\"text\" id=\"name\" placeholder=\"Enter Your Name\" />\r\n                            <input type=\"text\" id=\"gameId\" placeholder=\"Enter Game Id\" />\r\n\r\n                        </div>\r\n\r\n                        <div>\r\n                            <input type=\"button\" value=\"Join\" onClick={joinButtonHandler} />\r\n                        </div>\r\n                    </div>\r\n\r\n                    :\r\n                    <div className=\"row createCell\">\r\n                        <input type=\"text\" id=\"name\" placeholder=\"Enter Your Name\" />\r\n                        <input type=\"button\" value=\"Create\" onClick={createButtonHandler} />\r\n                    </div>\r\n\r\n                }\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default LandingPage\r\n","import React from 'react'\r\nimport { Route, Switch } from 'react-router-dom'\r\nimport GamePage from './Pages/GamePage/GamePage'\r\nimport LandingPage from './Pages/LandingPage/LandingPage'\r\n\r\nfunction Playground(props) {\r\n\r\n    return (\r\n        <Switch>\r\n            <Route exact path=\"/\">\r\n                <LandingPage props={props} />\r\n            </Route>\r\n            <Route path=\"/game/:code\">\r\n                <GamePage />\r\n            </Route>\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default Playground\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux'\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\nimport store from './Redux/store';\r\nimport Playground from './Playground';\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Router>\r\n      <div className=\"playGroundContainer\">\r\n        <Playground props={store} />\r\n      </div>\r\n    </Router>\r\n  </Provider>\r\n  ,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}